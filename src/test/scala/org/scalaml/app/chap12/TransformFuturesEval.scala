/**
  * Copyright (c) 2013-2015  Patrick Nicolas - Scala for Machine Learning - All rights reserved
  *
  * Licensed under the Apache License, Version 2.0 (the "License") you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  *
  * The source code in this file is provided by the author for the sole purpose of illustrating the
  * concepts and algorithms presented in "Scala for Machine Learning".
  * ISBN: 978-1-783355-874-2 Packt Publishing.
  *
  * Version 0.99
  */
package org.scalaml.app.chap12

import org.apache.log4j.Logger
import akka.pattern.ask
import akka.actor.{ActorSystem, Props}
import akka.util.Timeout

import org.scalaml.app.Eval
import org.scalaml.stats.XTSeries
import org.scalaml.core.Types.{ScalaMl, emptyString}
import org.scalaml.scalability.akka.message._
import org.scalaml.scalability.akka.TransformFutures
import org.scalaml.filtering.dft.DFT
import org.scalaml.util.{FormatUtils, DisplayUtils}
import ScalaMl.DblVector
import FormatUtils._


/**
  * Specialized Akka futures for the distributed discrete Fourier transform.
  * @constructor Create a set of futures for the distributed discrete Fourier transform.
  * @throws IllegalArgumentException if the time series or the partitioner are not defined.
  *
  * @author Patrick Nicolas
  * @since June 5, 2014
  * @note Scala for Machine Learning Chapter 12 Scalable frameworks/Akka
  */
final class DFTTransformFutures(
                                 xt: DblVector,
                                 partitions: Int)(implicit timeout: Timeout)
  extends TransformFutures(xt, DFT[Double].|>, partitions) {

  private val SPECTRUM_WIDTH = 64

  /**
    * Method to aggregate (reducer) the results for the discrete Fourier transform on
    * each worker.
    * @param data array of values (vector of Double) generated by each worker actor
    * @return Sequence of frequencies
    */
  override protected def reduce(data: Array[DblVector]): Seq[Double] = {
    require(data != null && data.length > 0,
      "DFTTransformFutures.aggregate Output of one of the workers undefined")

    val results = data.map(_.toArray).transpose.map(_.sum).take(SPECTRUM_WIDTH)
    val freq_str = format(results, emptyString, SHORT)
    DisplayUtils.show(s"Index  Frequencies\n$freq_str", logger)
    results.toSeq
  }
}


/**
  * '''Purpose''': Singleton to evaluate Scala/Akka futures
  *
  * @author Patrick Nicolas
  * @note Scala for Machine Learning Chapter 12 Scalable frameworks / Akka framework / futures
  */
object TransformFuturesEval extends Eval {

  import java.util.concurrent.TimeoutException
  import scala.util.{Random, Try, Success, Failure}
  import scala.concurrent.Await
  import scala.concurrent.duration.Duration

  /**
    * Name of the evaluation
    */
  val name: String = "TransformFuturesEval"

  private val NUM_WORKERS = 8
  private val NUM_DATA_POINTS = 1000000
  private val h = (x: Double) => 2.0 * Math.cos(Math.PI * 0.005 * x) + // simulated first harmonic
    Math.cos(Math.PI * 0.05 * x) + // simulated second harmonic
    0.5 * Math.cos(Math.PI * 0.2 * x) + // simulated third harmonic
    0.2 * Random.nextDouble

  private val duration = Duration(8000, "millis")
  implicit val timeout = new Timeout(duration)

  /** Execution of the scalatest for futures design with Akka framework.
    * This method is invoked by the  actor-based test framework function, ScalaMlTest.evaluate
    * @param args array of arguments used in the test
    *
    *             Exceptions thrown during the execution of the tests are caught by the wrapper or handler
    *             test method in Eval trait defined as follows:
    *             {{{
    *                 def test(args: Array[String]) =
    *                   Try(run(args)) match {
    *                     case Success(n) => ...
    *                     case Failure(e) => ...
    *             }}}
    *             The tests can be executed through ''sbt run'' or individually by calling
    *             ''TestName.test(args)'' (i.e. DKalmanEval.test(Array[String]("IBM") )
    */
  override protected def run(args: Array[String]): Int = {
    show(s"$header Data transformation futures using Akka actors")

    val actorSystem = ActorSystem("System")

    val xt = Vector.tabulate(NUM_DATA_POINTS)(h(_))

    val master = actorSystem.actorOf(Props(new DFTTransformFutures(xt, NUM_WORKERS)),
      "DFTTransform")

    val future = master ? Start(0)
    Await.result(future, timeout.duration)

    actorSystem.shutdown
    1
  }
}

// -----------------------------------------------  EOF ---------------------------